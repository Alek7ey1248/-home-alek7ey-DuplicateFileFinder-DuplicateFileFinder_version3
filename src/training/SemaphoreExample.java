package training;
import java.util.concurrent.Semaphore;

// семафор - ограничиваем доступ к ресурсу
// В пуле потоков, семафор мог бы использоваться для ограничения количества потоков, которые могут одновременно выполнять задачи из пула.
// Для задач, которые требуют много вычислений (CPU-bound), разумно использовать количество потоков,
// равное количеству ядер или немного больше.
// Для задач, которые ожидают ввода-вывода (I/O-bound),
// можно использовать большее количество потоков, так как они часто находятся в состоянии ожидания.

// Использование Executors: Java предоставляет классы, такие как Executors,
// которые могут помочь в управлении пулами потоков.
// Например, Executors.newFixedThreadPool(int nThreads) создает пул фиксированного размера.
// Вы можете начать с количества потоков, равного количеству доступных ядер,
// и затем настраивать его в зависимости от результатов тестирования.
public class SemaphoreExample {
    static int n = 2;
    // число в скобках,означает, что одновременно до шести потоков могут захватывать один семафор и выполнять код, защищенный этим семафором. Если больше потоков попытаются захватить семафор, они будут блокироваться, пока не освободится одно из разрешений.
    private static final Semaphore semaphore = new Semaphore(n); // Максимум 2 потока могут одновременно получить доступ

    // main - запускает 5 потоков, которые пытаются получить доступ к ресурсу
    public static void main(String[] args) {
        for (int i = 0; i < 6; i++) {
            new Thread(new Worker(i)).start();
        }
    }

    static class Worker implements Runnable {
        private final int id;

        // Конструктор
        Worker(int id) {
            this.id = id;
        }

        // Реализация метода run - потоки пытаются получить доступ к ресурсу при помощи семафора
        @Override
        public void run() {
            try {
                System.out.println("Поток " + id + " ожидает разрешение...");
                semaphore.acquire(); // Запрашиваем разрешение
                System.out.println("Поток " + id + " получил разрешение.");

                // Имитация работы с ресурсом -  задержка на 10 секунд
                Thread.sleep(10000);

                System.out.println("Поток " + id + " освобождает разрешение.");
            } catch (InterruptedException e) {
                // Обработка исключения - прерывание потока
                Thread.currentThread().interrupt();
            } finally {
                semaphore.release(); // Освобождаем разрешение
            }
        }
    }
}
